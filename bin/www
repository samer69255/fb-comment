#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fb-comment-bot:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
var io = require('socket.io')(server);
var list = [];



var request = require('request');



function start() {

}



function check(token,fn) {
    var url = 'https://graph.facebook.com/v2.10/me?fields=id&access_token='+token;
    delete token;
    var op = {
        headers: {'content-type': 'application/x-www-form-urlencoded'},
        url: url,
    }

    request.get(op, fn
);
}


function user(token,mess,page,time) {
    this.token = token;
    this.mess = mess;
    this.page = page;
    this.t = time || 5;
    this.times = 1;
    this.post= {};
    this.run = false;
    this.cn = 0;

    var self = this;

    delete token,mess,page,time;



    this.comment = function (id,mess) {


        var host = 'https://graph.facebook.com'
        var url = host+'/v2.10/'+id+'/comments';
        var mess = mess || this.mess;

        request.post({
            headers: {'content-type' : 'application/x-www-form-urlencoded'},
            url:     url,
            form:   {
                access_token:this.token,
                message:mess.toString()
            }

            // on comple comment
        }, function (error, req, body) {

            if (body.error)
            {
                console.log(body);
                io.sockets.emit('err', self.id);

                return;
            }

            self.cn++;
            io.sockets.emit('set', JSON.stringify({
                id:self.id,
                new:self.cn
            }));

        });



    }

    this.check = function () {
        var
            host = 'https://graph.facebook.com',
            url = host + '/v2.10/'+ this.page +'/feed';
        url += '?access_token=' + this.token;
        request.get({
            headers: {'content-type' : 'application/x-www-form-urlencoded'},
            url:     url,


            // on comple comment
        }, function (error, resp, body) {

            body = JSON.parse(body);
            //console.log(body.data);
            data = body.data;
            for (var i in data) {
                var d = data[i].created_time;
                time = new Date().getTime() - Date.parse(d);
                var min= getMin(time);
                if (min <= self.t) {

                    var post_id = data[i].id;
                    if (! (post_id in self.post))
                    {
                        console.log(self.post);

                        self.post[post_id] = 1;
                        self.comment(post_id);
                    }

                }
                if (self.run) self.check();
            }

        });
    }

    this.start = function () {
        this.run = true;
        this.check();
        this.status = "running";
    }

    this.stop = function () {
        this.run = false;
        this.status = 'stop';
    }


}



function getMin(millis) {
    var minutes = Math.floor(millis / 60000);
    return minutes;
}




start();

io.on("connection",function (socket) {

    for (var i in list)
    {
        var sn = list[i];
       // delete sn.access_token;
        socket.emit('add',JSON.stringify(sn));
    }


    socket.on("add",function (ms) {
        var id;
        var u = JSON.parse(ms);
        socket.emit("status",JSON.stringify({
            text:'check from access token',
            color:'green'
        }));
        check(u.access_token,function (error,body) {

            if (JSON.parse(body.body).id)
            {
                id = JSON.parse(body.body).id;
                console.log(id);
                socket.emit("status", JSON.stringify({
                    text:'done',
                    color:'green',
                    done:true
                }));


                var _s = new user(u.access_token,u.mess,u.page,5);
                _s.id = u.page + '_' + getRandom();
                _s.name = u.page;
                list[_s.id] = _s;
               // delete _s.access_token;
                socket.emit('add',JSON.stringify(_s));
               // socket.emit('html',JSON.stringify(list));
            }
            else
            {
                console.log(body.body);
                socket.emit("status", JSON.stringify({
                    text:'error',
                    color:'red',
                    error:true
                }));
            }
        });

    });

    socket.on("stop",function (id) {
            console.log('stopped');
            list[id].stop();
            io.sockets.emit('stop',id);
    });

    socket.on("start",function (id) {
            console.log(id);

            io.sockets.emit('start',id);

            var ob =  list[id];
            ob.start();

    });

    socket.on("del",function (id) {


            io.sockets.emit('del',id);

            list[id].stop();

            delete list[id];
    });



});

function getRandom() {
    return Math.floor((Math.random() * 9999999999) + 1);
}